// <copyright file="PacketBindings.h" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (publish/rebuild the
//     managed library project).
// </auto-generated>
//------------------------------------------------------------------------------

#pragma once

#include "stdafx.h"
#include "DotNetRuntime.h"
#include "Connection.h"
#include <coreclr_delegates.h>


typedef void(CORECLR_DELEGATE_CALLTYPE* SendConnectionInfoRequest075)(int32_t, BYTE );
inline SendConnectionInfoRequest075 dotnet_SendConnectionInfoRequest075 = reinterpret_cast<SendConnectionInfoRequest075>(g_dotnet->get_method(type_name_connection_manager, L"SendConnectionInfoRequest075"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendConnectionInfoRequest)(int32_t, uint16_t );
inline SendConnectionInfoRequest dotnet_SendConnectionInfoRequest = reinterpret_cast<SendConnectionInfoRequest>(g_dotnet->get_method(type_name_connection_manager, L"SendConnectionInfoRequest"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendConnectionInfo)(int32_t, const wchar_t* , uint32_t, uint16_t );
inline SendConnectionInfo dotnet_SendConnectionInfo = reinterpret_cast<SendConnectionInfo>(g_dotnet->get_method(type_name_connection_manager, L"SendConnectionInfo"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendServerListRequest)(int32_t);
inline SendServerListRequest dotnet_SendServerListRequest = reinterpret_cast<SendServerListRequest>(g_dotnet->get_method(type_name_connection_manager, L"SendServerListRequest"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendServerListRequestOld)(int32_t);
inline SendServerListRequestOld dotnet_SendServerListRequestOld = reinterpret_cast<SendServerListRequestOld>(g_dotnet->get_method(type_name_connection_manager, L"SendServerListRequestOld"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendHello)(int32_t);
inline SendHello dotnet_SendHello = reinterpret_cast<SendHello>(g_dotnet->get_method(type_name_connection_manager, L"SendHello"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendPatchCheckRequest)(int32_t, BYTE , BYTE , BYTE );
inline SendPatchCheckRequest dotnet_SendPatchCheckRequest = reinterpret_cast<SendPatchCheckRequest>(g_dotnet->get_method(type_name_connection_manager, L"SendPatchCheckRequest"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendPatchVersionOkay)(int32_t);
inline SendPatchVersionOkay dotnet_SendPatchVersionOkay = reinterpret_cast<SendPatchVersionOkay>(g_dotnet->get_method(type_name_connection_manager, L"SendPatchVersionOkay"));

typedef void(CORECLR_DELEGATE_CALLTYPE* SendClientNeedsPatch)(int32_t, BYTE , const wchar_t* , uint32_t);
inline SendClientNeedsPatch dotnet_SendClientNeedsPatch = reinterpret_cast<SendClientNeedsPatch>(g_dotnet->get_method(type_name_connection_manager, L"SendClientNeedsPatch"));
