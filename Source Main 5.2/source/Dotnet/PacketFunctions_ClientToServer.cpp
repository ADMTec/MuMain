// <copyright file="PacketFunctions.cpp" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (publish/rebuild the
//     managed library project).
// </auto-generated>
//------------------------------------------------------------------------------

#include "stdafx.h"
#include "PacketFunctions_ClientToServer.h"
#include "PacketBindings_ClientToServer.h"


void PacketFunctions_ClientToServer::SendPing(uint32_t tickCount, uint16_t attackSpeed)
{
    dotnet_SendPing(this->_handle, tickCount, attackSpeed);
}

void PacketFunctions_ClientToServer::SendChecksumResponse(uint32_t checksum)
{
    dotnet_SendChecksumResponse(this->_handle, checksum);
}

void PacketFunctions_ClientToServer::SendPublicChatMessage(const wchar_t* character, uint32_t characterByteLength, const wchar_t* message, uint32_t messageByteLength)
{
    dotnet_SendPublicChatMessage(this->_handle, character, characterByteLength, message, messageByteLength);
}

void PacketFunctions_ClientToServer::SendWhisperMessage(const wchar_t* receiverName, uint32_t receiverNameByteLength, const wchar_t* message, uint32_t messageByteLength)
{
    dotnet_SendWhisperMessage(this->_handle, receiverName, receiverNameByteLength, message, messageByteLength);
}

void PacketFunctions_ClientToServer::SendLoginLongPassword(const BYTE* username, uint32_t usernameByteLength, const BYTE* password, uint32_t passwordByteLength, uint32_t tickCount, const BYTE* clientVersion, uint32_t clientVersionByteLength, const BYTE* clientSerial, uint32_t clientSerialByteLength)
{
    dotnet_SendLoginLongPassword(this->_handle, username, usernameByteLength, password, passwordByteLength, tickCount, clientVersion, clientVersionByteLength, clientSerial, clientSerialByteLength);
}

void PacketFunctions_ClientToServer::SendLoginShortPassword(const BYTE* username, uint32_t usernameByteLength, const BYTE* password, uint32_t passwordByteLength, uint32_t tickCount, const BYTE* clientVersion, uint32_t clientVersionByteLength, const BYTE* clientSerial, uint32_t clientSerialByteLength)
{
    dotnet_SendLoginShortPassword(this->_handle, username, usernameByteLength, password, passwordByteLength, tickCount, clientVersion, clientVersionByteLength, clientSerial, clientSerialByteLength);
}

void PacketFunctions_ClientToServer::SendLogin075(const BYTE* username, uint32_t usernameByteLength, const BYTE* password, uint32_t passwordByteLength, uint32_t tickCount, const BYTE* clientVersion, uint32_t clientVersionByteLength, const BYTE* clientSerial, uint32_t clientSerialByteLength)
{
    dotnet_SendLogin075(this->_handle, username, usernameByteLength, password, passwordByteLength, tickCount, clientVersion, clientVersionByteLength, clientSerial, clientSerialByteLength);
}

void PacketFunctions_ClientToServer::SendLogOut(uint32_t type)
{
    dotnet_SendLogOut(this->_handle, type);
}

void PacketFunctions_ClientToServer::SendLogOutByCheatDetection(BYTE param, BYTE type)
{
    dotnet_SendLogOutByCheatDetection(this->_handle, param, type);
}

void PacketFunctions_ClientToServer::SendResetCharacterPointRequest()
{
    dotnet_SendResetCharacterPointRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendPlayerShopSetItemPrice(BYTE itemSlot, uint32_t price)
{
    dotnet_SendPlayerShopSetItemPrice(this->_handle, itemSlot, price);
}

void PacketFunctions_ClientToServer::SendPlayerShopOpen(const wchar_t* storeName, uint32_t storeNameByteLength)
{
    dotnet_SendPlayerShopOpen(this->_handle, storeName, storeNameByteLength);
}

void PacketFunctions_ClientToServer::SendPlayerShopClose()
{
    dotnet_SendPlayerShopClose(this->_handle);
}

void PacketFunctions_ClientToServer::SendPlayerShopItemListRequest(uint16_t playerId, const wchar_t* playerName, uint32_t playerNameByteLength)
{
    dotnet_SendPlayerShopItemListRequest(this->_handle, playerId, playerName, playerNameByteLength);
}

void PacketFunctions_ClientToServer::SendPlayerShopItemBuyRequest(uint16_t playerId, const wchar_t* playerName, uint32_t playerNameByteLength, BYTE itemSlot)
{
    dotnet_SendPlayerShopItemBuyRequest(this->_handle, playerId, playerName, playerNameByteLength, itemSlot);
}

void PacketFunctions_ClientToServer::SendPickupItemRequest(uint16_t itemId)
{
    dotnet_SendPickupItemRequest(this->_handle, itemId);
}

void PacketFunctions_ClientToServer::SendPickupItemRequest075(uint16_t itemId)
{
    dotnet_SendPickupItemRequest075(this->_handle, itemId);
}

void PacketFunctions_ClientToServer::SendDropItemRequest(BYTE targetX, BYTE targetY, BYTE itemSlot)
{
    dotnet_SendDropItemRequest(this->_handle, targetX, targetY, itemSlot);
}

void PacketFunctions_ClientToServer::SendItemMoveRequest(uint32_t fromStorage, BYTE fromSlot, const BYTE* itemData, uint32_t itemDataByteLength, uint32_t toStorage, BYTE toSlot)
{
    dotnet_SendItemMoveRequest(this->_handle, fromStorage, fromSlot, itemData, itemDataByteLength, toStorage, toSlot);
}

void PacketFunctions_ClientToServer::SendConsumeItemRequest(BYTE itemSlot, BYTE targetSlot, uint32_t fruitConsumption)
{
    dotnet_SendConsumeItemRequest(this->_handle, itemSlot, targetSlot, fruitConsumption);
}

void PacketFunctions_ClientToServer::SendConsumeItemRequest075(BYTE itemSlot, BYTE targetSlot)
{
    dotnet_SendConsumeItemRequest075(this->_handle, itemSlot, targetSlot);
}

void PacketFunctions_ClientToServer::SendTalkToNpcRequest(uint16_t npcId)
{
    dotnet_SendTalkToNpcRequest(this->_handle, npcId);
}

void PacketFunctions_ClientToServer::SendCloseNpcRequest()
{
    dotnet_SendCloseNpcRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendBuyItemFromNpcRequest(BYTE itemSlot)
{
    dotnet_SendBuyItemFromNpcRequest(this->_handle, itemSlot);
}

void PacketFunctions_ClientToServer::SendSellItemToNpcRequest(BYTE itemSlot)
{
    dotnet_SendSellItemToNpcRequest(this->_handle, itemSlot);
}

void PacketFunctions_ClientToServer::SendRepairItemRequest(BYTE itemSlot, BYTE isSelfRepair)
{
    dotnet_SendRepairItemRequest(this->_handle, itemSlot, isSelfRepair);
}

void PacketFunctions_ClientToServer::SendWarpCommandRequest(uint32_t commandKey, uint16_t warpInfoIndex)
{
    dotnet_SendWarpCommandRequest(this->_handle, commandKey, warpInfoIndex);
}

void PacketFunctions_ClientToServer::SendEnterGateRequest(uint16_t gateNumber, BYTE teleportTargetX, BYTE teleportTargetY)
{
    dotnet_SendEnterGateRequest(this->_handle, gateNumber, teleportTargetX, teleportTargetY);
}

void PacketFunctions_ClientToServer::SendEnterGateRequest075(BYTE gateNumber, BYTE teleportTargetX, BYTE teleportTargetY)
{
    dotnet_SendEnterGateRequest075(this->_handle, gateNumber, teleportTargetX, teleportTargetY);
}

void PacketFunctions_ClientToServer::SendTeleportTarget(uint16_t targetId, BYTE teleportTargetX, BYTE teleportTargetY)
{
    dotnet_SendTeleportTarget(this->_handle, targetId, teleportTargetX, teleportTargetY);
}

void PacketFunctions_ClientToServer::SendServerChangeAuthentication(const BYTE* accountXor3, uint32_t accountXor3ByteLength, const BYTE* characterNameXor3, uint32_t characterNameXor3ByteLength, uint32_t authCode1, uint32_t authCode2, uint32_t authCode3, uint32_t authCode4, uint32_t tickCount, const BYTE* clientVersion, uint32_t clientVersionByteLength, const BYTE* clientSerial, uint32_t clientSerialByteLength)
{
    dotnet_SendServerChangeAuthentication(this->_handle, accountXor3, accountXor3ByteLength, characterNameXor3, characterNameXor3ByteLength, authCode1, authCode2, authCode3, authCode4, tickCount, clientVersion, clientVersionByteLength, clientSerial, clientSerialByteLength);
}

void PacketFunctions_ClientToServer::SendCastleSiegeStatusRequest()
{
    dotnet_SendCastleSiegeStatusRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeRegistrationRequest()
{
    dotnet_SendCastleSiegeRegistrationRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeUnregisterRequest()
{
    dotnet_SendCastleSiegeUnregisterRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeRegistrationStateRequest()
{
    dotnet_SendCastleSiegeRegistrationStateRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeMarkRegistration(BYTE itemIndex)
{
    dotnet_SendCastleSiegeMarkRegistration(this->_handle, itemIndex);
}

void PacketFunctions_ClientToServer::SendCastleSiegeDefenseBuyRequest(uint32_t npcNumber, uint32_t npcIndex)
{
    dotnet_SendCastleSiegeDefenseBuyRequest(this->_handle, npcNumber, npcIndex);
}

void PacketFunctions_ClientToServer::SendCastleSiegeDefenseRepairRequest(uint32_t npcNumber, uint32_t npcIndex)
{
    dotnet_SendCastleSiegeDefenseRepairRequest(this->_handle, npcNumber, npcIndex);
}

void PacketFunctions_ClientToServer::SendCastleSiegeDefenseUpgradeRequest(uint32_t npcNumber, uint32_t npcIndex, uint32_t npcUpgradeType, uint32_t npcUpgradeValue)
{
    dotnet_SendCastleSiegeDefenseUpgradeRequest(this->_handle, npcNumber, npcIndex, npcUpgradeType, npcUpgradeValue);
}

void PacketFunctions_ClientToServer::SendCastleSiegeTaxInfoRequest()
{
    dotnet_SendCastleSiegeTaxInfoRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeTaxChangeRequest(BYTE taxType, uint32_t taxRate)
{
    dotnet_SendCastleSiegeTaxChangeRequest(this->_handle, taxType, taxRate);
}

void PacketFunctions_ClientToServer::SendCastleSiegeTaxMoneyWithdraw(uint32_t amount)
{
    dotnet_SendCastleSiegeTaxMoneyWithdraw(this->_handle, amount);
}

void PacketFunctions_ClientToServer::SendToggleCastleGateRequest(BYTE closeState, uint16_t gateId)
{
    dotnet_SendToggleCastleGateRequest(this->_handle, closeState, gateId);
}

void PacketFunctions_ClientToServer::SendCastleGuildCommand(BYTE team, BYTE positionX, BYTE positionY, BYTE command)
{
    dotnet_SendCastleGuildCommand(this->_handle, team, positionX, positionY, command);
}

void PacketFunctions_ClientToServer::SendCastleSiegeHuntingZoneEntranceSetting(BYTE isPublic)
{
    dotnet_SendCastleSiegeHuntingZoneEntranceSetting(this->_handle, isPublic);
}

void PacketFunctions_ClientToServer::SendCastleSiegeGateListRequest()
{
    dotnet_SendCastleSiegeGateListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeStatueListRequest()
{
    dotnet_SendCastleSiegeStatueListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeRegisteredGuildsListRequest()
{
    dotnet_SendCastleSiegeRegisteredGuildsListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleOwnerListRequest()
{
    dotnet_SendCastleOwnerListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendFireCatapultRequest(uint16_t catapultId, BYTE targetAreaIndex)
{
    dotnet_SendFireCatapultRequest(this->_handle, catapultId, targetAreaIndex);
}

void PacketFunctions_ClientToServer::SendWeaponExplosionRequest(uint16_t catapultId)
{
    dotnet_SendWeaponExplosionRequest(this->_handle, catapultId);
}

void PacketFunctions_ClientToServer::SendGuildLogoOfCastleOwnerRequest()
{
    dotnet_SendGuildLogoOfCastleOwnerRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCastleSiegeHuntingZoneEnterRequest(uint32_t money)
{
    dotnet_SendCastleSiegeHuntingZoneEnterRequest(this->_handle, money);
}

void PacketFunctions_ClientToServer::SendCrywolfInfoRequest()
{
    dotnet_SendCrywolfInfoRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCrywolfContractRequest(uint16_t statueId)
{
    dotnet_SendCrywolfContractRequest(this->_handle, statueId);
}

void PacketFunctions_ClientToServer::SendCrywolfChaosRateBenefitRequest()
{
    dotnet_SendCrywolfChaosRateBenefitRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendWhiteAngelItemRequest()
{
    dotnet_SendWhiteAngelItemRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendEnterOnWerewolfRequest()
{
    dotnet_SendEnterOnWerewolfRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendEnterOnGatekeeperRequest()
{
    dotnet_SendEnterOnGatekeeperRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLeoHelperItemRequest()
{
    dotnet_SendLeoHelperItemRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendMoveToDeviasBySnowmanRequest()
{
    dotnet_SendMoveToDeviasBySnowmanRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendSantaClausItemRequest()
{
    dotnet_SendSantaClausItemRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendKanturuInfoRequest()
{
    dotnet_SendKanturuInfoRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendKanturuEnterRequest()
{
    dotnet_SendKanturuEnterRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendRaklionStateInfoRequest()
{
    dotnet_SendRaklionStateInfoRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCashShopPointInfoRequest()
{
    dotnet_SendCashShopPointInfoRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendCashShopOpenState(BYTE isClosed)
{
    dotnet_SendCashShopOpenState(this->_handle, isClosed);
}

void PacketFunctions_ClientToServer::SendCashShopItemBuyRequest(uint32_t packageMainIndex, uint32_t category, uint32_t productMainIndex, uint16_t itemIndex, uint32_t coinIndex, BYTE mileageFlag)
{
    dotnet_SendCashShopItemBuyRequest(this->_handle, packageMainIndex, category, productMainIndex, itemIndex, coinIndex, mileageFlag);
}

void PacketFunctions_ClientToServer::SendCashShopItemGiftRequest(uint32_t packageMainIndex, uint32_t category, uint32_t productMainIndex, uint16_t itemIndex, uint32_t coinIndex, BYTE mileageFlag, const wchar_t* giftReceiverName, uint32_t giftReceiverNameByteLength, const wchar_t* giftText, uint32_t giftTextByteLength)
{
    dotnet_SendCashShopItemGiftRequest(this->_handle, packageMainIndex, category, productMainIndex, itemIndex, coinIndex, mileageFlag, giftReceiverName, giftReceiverNameByteLength, giftText, giftTextByteLength);
}

void PacketFunctions_ClientToServer::SendCashShopStorageListRequest(uint32_t pageIndex, BYTE inventoryType)
{
    dotnet_SendCashShopStorageListRequest(this->_handle, pageIndex, inventoryType);
}

void PacketFunctions_ClientToServer::SendCashShopDeleteStorageItemRequest(uint32_t baseItemCode, uint32_t mainItemCode, BYTE productType)
{
    dotnet_SendCashShopDeleteStorageItemRequest(this->_handle, baseItemCode, mainItemCode, productType);
}

void PacketFunctions_ClientToServer::SendCashShopStorageItemConsumeRequest(uint32_t baseItemCode, uint32_t mainItemCode, uint16_t itemIndex, BYTE productType)
{
    dotnet_SendCashShopStorageItemConsumeRequest(this->_handle, baseItemCode, mainItemCode, itemIndex, productType);
}

void PacketFunctions_ClientToServer::SendCashShopEventItemListRequest(uint32_t categoryIndex)
{
    dotnet_SendCashShopEventItemListRequest(this->_handle, categoryIndex);
}

void PacketFunctions_ClientToServer::SendUnlockVault(uint16_t pin)
{
    dotnet_SendUnlockVault(this->_handle, pin);
}

void PacketFunctions_ClientToServer::SendSetVaultPin(uint16_t pin, const wchar_t* password, uint32_t passwordByteLength)
{
    dotnet_SendSetVaultPin(this->_handle, pin, password, passwordByteLength);
}

void PacketFunctions_ClientToServer::SendRemoveVaultPin(const wchar_t* password, uint32_t passwordByteLength)
{
    dotnet_SendRemoveVaultPin(this->_handle, password, passwordByteLength);
}

void PacketFunctions_ClientToServer::SendVaultClosed()
{
    dotnet_SendVaultClosed(this->_handle);
}

void PacketFunctions_ClientToServer::SendVaultMoveMoneyRequest(uint32_t direction, uint32_t amount)
{
    dotnet_SendVaultMoveMoneyRequest(this->_handle, direction, amount);
}

void PacketFunctions_ClientToServer::SendLahapJewelMixRequest(uint32_t operation, uint32_t item, uint32_t mixingStackSize, BYTE unmixingSourceSlot)
{
    dotnet_SendLahapJewelMixRequest(this->_handle, operation, item, mixingStackSize, unmixingSourceSlot);
}

void PacketFunctions_ClientToServer::SendPartyListRequest()
{
    dotnet_SendPartyListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendPartyPlayerKickRequest(BYTE playerIndex)
{
    dotnet_SendPartyPlayerKickRequest(this->_handle, playerIndex);
}

void PacketFunctions_ClientToServer::SendPartyInviteRequest(uint16_t targetPlayerId)
{
    dotnet_SendPartyInviteRequest(this->_handle, targetPlayerId);
}

void PacketFunctions_ClientToServer::SendPartyInviteResponse(BYTE accepted, uint16_t requesterId)
{
    dotnet_SendPartyInviteResponse(this->_handle, accepted, requesterId);
}

void PacketFunctions_ClientToServer::SendWalkRequest(BYTE sourceX, BYTE sourceY, BYTE stepCount, BYTE targetRotation, const BYTE* directions, uint32_t directionsByteLength)
{
    dotnet_SendWalkRequest(this->_handle, sourceX, sourceY, stepCount, targetRotation, directions, directionsByteLength);
}

void PacketFunctions_ClientToServer::SendWalkRequest075(BYTE sourceX, BYTE sourceY, BYTE stepCount, BYTE targetRotation, const BYTE* directions, uint32_t directionsByteLength)
{
    dotnet_SendWalkRequest075(this->_handle, sourceX, sourceY, stepCount, targetRotation, directions, directionsByteLength);
}

void PacketFunctions_ClientToServer::SendInstantMoveRequest(BYTE targetX, BYTE targetY)
{
    dotnet_SendInstantMoveRequest(this->_handle, targetX, targetY);
}

void PacketFunctions_ClientToServer::SendAnimationRequest(BYTE rotation, BYTE animationNumber)
{
    dotnet_SendAnimationRequest(this->_handle, rotation, animationNumber);
}

void PacketFunctions_ClientToServer::SendRequestCharacterList(BYTE language)
{
    dotnet_SendRequestCharacterList(this->_handle, language);
}

void PacketFunctions_ClientToServer::SendCreateCharacter(const wchar_t* name, uint32_t nameByteLength, uint32_t class_)
{
    dotnet_SendCreateCharacter(this->_handle, name, nameByteLength, class_);
}

void PacketFunctions_ClientToServer::SendDeleteCharacter(const wchar_t* name, uint32_t nameByteLength, const wchar_t* securityCode, uint32_t securityCodeByteLength)
{
    dotnet_SendDeleteCharacter(this->_handle, name, nameByteLength, securityCode, securityCodeByteLength);
}

void PacketFunctions_ClientToServer::SendSelectCharacter(const wchar_t* name, uint32_t nameByteLength)
{
    dotnet_SendSelectCharacter(this->_handle, name, nameByteLength);
}

void PacketFunctions_ClientToServer::SendFocusCharacter(const wchar_t* name, uint32_t nameByteLength)
{
    dotnet_SendFocusCharacter(this->_handle, name, nameByteLength);
}

void PacketFunctions_ClientToServer::SendIncreaseCharacterStatPoint(uint32_t statType)
{
    dotnet_SendIncreaseCharacterStatPoint(this->_handle, statType);
}

void PacketFunctions_ClientToServer::SendClientReadyAfterMapChange()
{
    dotnet_SendClientReadyAfterMapChange(this->_handle);
}

void PacketFunctions_ClientToServer::SendSaveKeyConfiguration(const BYTE* configuration, uint32_t configurationByteLength)
{
    dotnet_SendSaveKeyConfiguration(this->_handle, configuration, configurationByteLength);
}

void PacketFunctions_ClientToServer::SendAddMasterSkillPoint(uint16_t skillId)
{
    dotnet_SendAddMasterSkillPoint(this->_handle, skillId);
}

void PacketFunctions_ClientToServer::SendHitRequest(uint16_t targetId, BYTE attackAnimation, BYTE lookingDirection)
{
    dotnet_SendHitRequest(this->_handle, targetId, attackAnimation, lookingDirection);
}

void PacketFunctions_ClientToServer::SendTargetedSkill(uint16_t skillId, uint16_t targetId)
{
    dotnet_SendTargetedSkill(this->_handle, skillId, targetId);
}

void PacketFunctions_ClientToServer::SendTargetedSkill075(BYTE skillIndex, uint16_t targetId)
{
    dotnet_SendTargetedSkill075(this->_handle, skillIndex, targetId);
}

void PacketFunctions_ClientToServer::SendTargetedSkill095(BYTE skillIndex, uint16_t targetId)
{
    dotnet_SendTargetedSkill095(this->_handle, skillIndex, targetId);
}

void PacketFunctions_ClientToServer::SendMagicEffectCancelRequest(uint16_t skillId, uint16_t playerId)
{
    dotnet_SendMagicEffectCancelRequest(this->_handle, skillId, playerId);
}

void PacketFunctions_ClientToServer::SendAreaSkill(uint16_t skillId, BYTE targetX, BYTE targetY, BYTE rotation, uint16_t extraTargetId, BYTE animationCounter)
{
    dotnet_SendAreaSkill(this->_handle, skillId, targetX, targetY, rotation, extraTargetId, animationCounter);
}

void PacketFunctions_ClientToServer::SendAreaSkill075(BYTE skillIndex, BYTE targetX, BYTE targetY, BYTE rotation)
{
    dotnet_SendAreaSkill075(this->_handle, skillIndex, targetX, targetY, rotation);
}

void PacketFunctions_ClientToServer::SendAreaSkill095(BYTE skillIndex, BYTE targetX, BYTE targetY, BYTE rotation)
{
    dotnet_SendAreaSkill095(this->_handle, skillIndex, targetX, targetY, rotation);
}

void PacketFunctions_ClientToServer::SendRageAttackRequest(uint16_t skillId, uint16_t targetId)
{
    dotnet_SendRageAttackRequest(this->_handle, skillId, targetId);
}

void PacketFunctions_ClientToServer::SendRageAttackRangeRequest(uint16_t skillId, uint16_t targetId)
{
    dotnet_SendRageAttackRangeRequest(this->_handle, skillId, targetId);
}

void PacketFunctions_ClientToServer::SendTradeCancel()
{
    dotnet_SendTradeCancel(this->_handle);
}

void PacketFunctions_ClientToServer::SendTradeButtonStateChange(uint32_t newState)
{
    dotnet_SendTradeButtonStateChange(this->_handle, newState);
}

void PacketFunctions_ClientToServer::SendTradeRequest(uint16_t playerId)
{
    dotnet_SendTradeRequest(this->_handle, playerId);
}

void PacketFunctions_ClientToServer::SendTradeRequestResponse(BYTE tradeAccepted)
{
    dotnet_SendTradeRequestResponse(this->_handle, tradeAccepted);
}

void PacketFunctions_ClientToServer::SendSetTradeMoney(uint32_t amount)
{
    dotnet_SendSetTradeMoney(this->_handle, amount);
}

void PacketFunctions_ClientToServer::SendLetterDeleteRequest(uint16_t letterIndex)
{
    dotnet_SendLetterDeleteRequest(this->_handle, letterIndex);
}

void PacketFunctions_ClientToServer::SendLetterListRequest()
{
    dotnet_SendLetterListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLetterSendRequest(uint32_t letterId, const wchar_t* receiver, uint32_t receiverByteLength, const wchar_t* title, uint32_t titleByteLength, BYTE rotation, BYTE animation, uint16_t messageLength, const wchar_t* message, uint32_t messageByteLength)
{
    dotnet_SendLetterSendRequest(this->_handle, letterId, receiver, receiverByteLength, title, titleByteLength, rotation, animation, messageLength, message, messageByteLength);
}

void PacketFunctions_ClientToServer::SendLetterReadRequest(uint16_t letterIndex)
{
    dotnet_SendLetterReadRequest(this->_handle, letterIndex);
}

void PacketFunctions_ClientToServer::SendGuildKickPlayerRequest(const wchar_t* playerName, uint32_t playerNameByteLength, const wchar_t* securityCode, uint32_t securityCodeByteLength)
{
    dotnet_SendGuildKickPlayerRequest(this->_handle, playerName, playerNameByteLength, securityCode, securityCodeByteLength);
}

void PacketFunctions_ClientToServer::SendGuildJoinRequest(uint16_t guildMasterPlayerId)
{
    dotnet_SendGuildJoinRequest(this->_handle, guildMasterPlayerId);
}

void PacketFunctions_ClientToServer::SendGuildJoinResponse(BYTE accepted, uint16_t requesterId)
{
    dotnet_SendGuildJoinResponse(this->_handle, accepted, requesterId);
}

void PacketFunctions_ClientToServer::SendGuildListRequest()
{
    dotnet_SendGuildListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendGuildCreateRequest(const wchar_t* guildName, uint32_t guildNameByteLength, const BYTE* guildEmblem, uint32_t guildEmblemByteLength)
{
    dotnet_SendGuildCreateRequest(this->_handle, guildName, guildNameByteLength, guildEmblem, guildEmblemByteLength);
}

void PacketFunctions_ClientToServer::SendGuildCreateRequest075(const wchar_t* guildName, uint32_t guildNameByteLength, const BYTE* guildEmblem, uint32_t guildEmblemByteLength)
{
    dotnet_SendGuildCreateRequest075(this->_handle, guildName, guildNameByteLength, guildEmblem, guildEmblemByteLength);
}

void PacketFunctions_ClientToServer::SendGuildMasterAnswer(BYTE showCreationDialog)
{
    dotnet_SendGuildMasterAnswer(this->_handle, showCreationDialog);
}

void PacketFunctions_ClientToServer::SendCancelGuildCreation()
{
    dotnet_SendCancelGuildCreation(this->_handle);
}

void PacketFunctions_ClientToServer::SendGuildWarResponse(BYTE accepted)
{
    dotnet_SendGuildWarResponse(this->_handle, accepted);
}

void PacketFunctions_ClientToServer::SendGuildInfoRequest(uint32_t guildId)
{
    dotnet_SendGuildInfoRequest(this->_handle, guildId);
}

void PacketFunctions_ClientToServer::SendGuildRoleAssignRequest(uint32_t role, const wchar_t* playerName, uint32_t playerNameByteLength, BYTE type)
{
    dotnet_SendGuildRoleAssignRequest(this->_handle, role, playerName, playerNameByteLength, type);
}

void PacketFunctions_ClientToServer::SendGuildTypeChangeRequest(BYTE guildType)
{
    dotnet_SendGuildTypeChangeRequest(this->_handle, guildType);
}

void PacketFunctions_ClientToServer::SendGuildRelationshipChangeRequest(uint32_t relationshipType, uint32_t requestType, uint16_t targetPlayerId)
{
    dotnet_SendGuildRelationshipChangeRequest(this->_handle, relationshipType, requestType, targetPlayerId);
}

void PacketFunctions_ClientToServer::SendGuildRelationshipChangeResponse(uint32_t relationshipType, uint32_t requestType, BYTE response, uint16_t targetPlayerId)
{
    dotnet_SendGuildRelationshipChangeResponse(this->_handle, relationshipType, requestType, response, targetPlayerId);
}

void PacketFunctions_ClientToServer::SendRequestAllianceList()
{
    dotnet_SendRequestAllianceList(this->_handle);
}

void PacketFunctions_ClientToServer::SendRemoveAllianceGuildRequest(const wchar_t* guildName, uint32_t guildNameByteLength)
{
    dotnet_SendRemoveAllianceGuildRequest(this->_handle, guildName, guildNameByteLength);
}

void PacketFunctions_ClientToServer::SendPingResponse()
{
    dotnet_SendPingResponse(this->_handle);
}

void PacketFunctions_ClientToServer::SendItemRepair(BYTE inventoryItemSlot)
{
    dotnet_SendItemRepair(this->_handle, inventoryItemSlot);
}

void PacketFunctions_ClientToServer::SendChaosMachineMixRequest(uint32_t mixType, BYTE socketSlot)
{
    dotnet_SendChaosMachineMixRequest(this->_handle, mixType, socketSlot);
}

void PacketFunctions_ClientToServer::SendCraftingDialogCloseRequest()
{
    dotnet_SendCraftingDialogCloseRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendFriendListRequest()
{
    dotnet_SendFriendListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendFriendAddRequest(const wchar_t* friendName, uint32_t friendNameByteLength)
{
    dotnet_SendFriendAddRequest(this->_handle, friendName, friendNameByteLength);
}

void PacketFunctions_ClientToServer::SendFriendDelete(const wchar_t* friendName, uint32_t friendNameByteLength)
{
    dotnet_SendFriendDelete(this->_handle, friendName, friendNameByteLength);
}

void PacketFunctions_ClientToServer::SendChatRoomCreateRequest(const wchar_t* friendName, uint32_t friendNameByteLength)
{
    dotnet_SendChatRoomCreateRequest(this->_handle, friendName, friendNameByteLength);
}

void PacketFunctions_ClientToServer::SendFriendAddResponse(BYTE accepted, const wchar_t* friendRequesterName, uint32_t friendRequesterNameByteLength)
{
    dotnet_SendFriendAddResponse(this->_handle, accepted, friendRequesterName, friendRequesterNameByteLength);
}

void PacketFunctions_ClientToServer::SendSetFriendOnlineState(BYTE onlineState)
{
    dotnet_SendSetFriendOnlineState(this->_handle, onlineState);
}

void PacketFunctions_ClientToServer::SendChatRoomInvitationRequest(const wchar_t* friendName, uint32_t friendNameByteLength, uint16_t roomId, uint32_t requestId)
{
    dotnet_SendChatRoomInvitationRequest(this->_handle, friendName, friendNameByteLength, roomId, requestId);
}

void PacketFunctions_ClientToServer::SendLegacyQuestStateRequest()
{
    dotnet_SendLegacyQuestStateRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLegacyQuestStateSetRequest(BYTE questNumber, uint32_t newState)
{
    dotnet_SendLegacyQuestStateSetRequest(this->_handle, questNumber, newState);
}

void PacketFunctions_ClientToServer::SendPetCommandRequest(uint32_t petType, uint32_t commandMode, uint16_t targetId)
{
    dotnet_SendPetCommandRequest(this->_handle, petType, commandMode, targetId);
}

void PacketFunctions_ClientToServer::SendPetInfoRequest(uint32_t pet, uint32_t storage, BYTE itemSlot)
{
    dotnet_SendPetInfoRequest(this->_handle, pet, storage, itemSlot);
}

void PacketFunctions_ClientToServer::SendIllusionTempleEnterRequest(BYTE mapNumber, BYTE itemSlot)
{
    dotnet_SendIllusionTempleEnterRequest(this->_handle, mapNumber, itemSlot);
}

void PacketFunctions_ClientToServer::SendIllusionTempleSkillRequest(uint16_t skillNumber, BYTE targetObjectIndex, BYTE distance)
{
    dotnet_SendIllusionTempleSkillRequest(this->_handle, skillNumber, targetObjectIndex, distance);
}

void PacketFunctions_ClientToServer::SendIllusionTempleRewardRequest()
{
    dotnet_SendIllusionTempleRewardRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLuckyCoinCountRequest()
{
    dotnet_SendLuckyCoinCountRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLuckyCoinRegistrationRequest()
{
    dotnet_SendLuckyCoinRegistrationRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendLuckyCoinExchangeRequest(uint32_t coinCount)
{
    dotnet_SendLuckyCoinExchangeRequest(this->_handle, coinCount);
}

void PacketFunctions_ClientToServer::SendDoppelgangerEnterRequest(BYTE ticketItemSlot)
{
    dotnet_SendDoppelgangerEnterRequest(this->_handle, ticketItemSlot);
}

void PacketFunctions_ClientToServer::SendEnterMarketPlaceRequest()
{
    dotnet_SendEnterMarketPlaceRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendMuHelperStatusChangeRequest(BYTE pauseStatus)
{
    dotnet_SendMuHelperStatusChangeRequest(this->_handle, pauseStatus);
}

void PacketFunctions_ClientToServer::SendMuHelperSaveDataRequest(const BYTE* helperData, uint32_t helperDataByteLength)
{
    dotnet_SendMuHelperSaveDataRequest(this->_handle, helperData, helperDataByteLength);
}

void PacketFunctions_ClientToServer::SendQuestSelectRequest(uint16_t questNumber, uint16_t questGroup, BYTE selectedTextIndex)
{
    dotnet_SendQuestSelectRequest(this->_handle, questNumber, questGroup, selectedTextIndex);
}

void PacketFunctions_ClientToServer::SendQuestProceedRequest(uint16_t questNumber, uint16_t questGroup, uint32_t proceedAction)
{
    dotnet_SendQuestProceedRequest(this->_handle, questNumber, questGroup, proceedAction);
}

void PacketFunctions_ClientToServer::SendQuestCompletionRequest(uint16_t questNumber, uint16_t questGroup)
{
    dotnet_SendQuestCompletionRequest(this->_handle, questNumber, questGroup);
}

void PacketFunctions_ClientToServer::SendQuestCancelRequest(uint16_t questNumber, uint16_t questGroup)
{
    dotnet_SendQuestCancelRequest(this->_handle, questNumber, questGroup);
}

void PacketFunctions_ClientToServer::SendQuestClientActionRequest(uint16_t questNumber, uint16_t questGroup)
{
    dotnet_SendQuestClientActionRequest(this->_handle, questNumber, questGroup);
}

void PacketFunctions_ClientToServer::SendActiveQuestListRequest()
{
    dotnet_SendActiveQuestListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendQuestStateRequest(uint16_t questNumber, uint16_t questGroup)
{
    dotnet_SendQuestStateRequest(this->_handle, questNumber, questGroup);
}

void PacketFunctions_ClientToServer::SendEventQuestStateListRequest()
{
    dotnet_SendEventQuestStateListRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendAvailableQuestsRequest()
{
    dotnet_SendAvailableQuestsRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendNpcBuffRequest()
{
    dotnet_SendNpcBuffRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendEnterEmpireGuardianEvent(BYTE itemSlot)
{
    dotnet_SendEnterEmpireGuardianEvent(this->_handle, itemSlot);
}

void PacketFunctions_ClientToServer::SendGensJoinRequest(uint32_t gensType)
{
    dotnet_SendGensJoinRequest(this->_handle, gensType);
}

void PacketFunctions_ClientToServer::SendGensLeaveRequest()
{
    dotnet_SendGensLeaveRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendGensRewardRequest(uint32_t gensType)
{
    dotnet_SendGensRewardRequest(this->_handle, gensType);
}

void PacketFunctions_ClientToServer::SendGensRankingRequest()
{
    dotnet_SendGensRankingRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendDevilSquareEnterRequest(BYTE squareLevel, BYTE ticketItemInventoryIndex)
{
    dotnet_SendDevilSquareEnterRequest(this->_handle, squareLevel, ticketItemInventoryIndex);
}

void PacketFunctions_ClientToServer::SendMiniGameOpeningStateRequest(uint32_t eventType, BYTE eventLevel)
{
    dotnet_SendMiniGameOpeningStateRequest(this->_handle, eventType, eventLevel);
}

void PacketFunctions_ClientToServer::SendEventChipRegistrationRequest(BYTE type, BYTE itemIndex)
{
    dotnet_SendEventChipRegistrationRequest(this->_handle, type, itemIndex);
}

void PacketFunctions_ClientToServer::SendMutoNumberRequest()
{
    dotnet_SendMutoNumberRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendEventChipExitDialog()
{
    dotnet_SendEventChipExitDialog(this->_handle);
}

void PacketFunctions_ClientToServer::SendEventChipExchangeRequest(BYTE type)
{
    dotnet_SendEventChipExchangeRequest(this->_handle, type);
}

void PacketFunctions_ClientToServer::SendServerImmigrationRequest(const wchar_t* securityCode, uint32_t securityCodeByteLength)
{
    dotnet_SendServerImmigrationRequest(this->_handle, securityCode, securityCodeByteLength);
}

void PacketFunctions_ClientToServer::SendLuckyNumberRequest(const wchar_t* serial1, uint32_t serial1ByteLength, const wchar_t* serial2, uint32_t serial2ByteLength, const wchar_t* serial3, uint32_t serial3ByteLength)
{
    dotnet_SendLuckyNumberRequest(this->_handle, serial1, serial1ByteLength, serial2, serial2ByteLength, serial3, serial3ByteLength);
}

void PacketFunctions_ClientToServer::SendBloodCastleEnterRequest(BYTE castleLevel, BYTE ticketItemInventoryIndex)
{
    dotnet_SendBloodCastleEnterRequest(this->_handle, castleLevel, ticketItemInventoryIndex);
}

void PacketFunctions_ClientToServer::SendMiniGameEventCountRequest(uint32_t miniGame)
{
    dotnet_SendMiniGameEventCountRequest(this->_handle, miniGame);
}

void PacketFunctions_ClientToServer::SendChaosCastleEnterRequest(BYTE castleLevel, BYTE ticketItemInventoryIndex)
{
    dotnet_SendChaosCastleEnterRequest(this->_handle, castleLevel, ticketItemInventoryIndex);
}

void PacketFunctions_ClientToServer::SendChaosCastlePositionSet(BYTE positionX, BYTE positionY)
{
    dotnet_SendChaosCastlePositionSet(this->_handle, positionX, positionY);
}

void PacketFunctions_ClientToServer::SendDuelStartRequest(uint16_t playerId, const wchar_t* playerName, uint32_t playerNameByteLength)
{
    dotnet_SendDuelStartRequest(this->_handle, playerId, playerName, playerNameByteLength);
}

void PacketFunctions_ClientToServer::SendDuelStartResponse(BYTE response, uint16_t playerId, const wchar_t* playerName, uint32_t playerNameByteLength)
{
    dotnet_SendDuelStartResponse(this->_handle, response, playerId, playerName, playerNameByteLength);
}

void PacketFunctions_ClientToServer::SendDuelStopRequest()
{
    dotnet_SendDuelStopRequest(this->_handle);
}

void PacketFunctions_ClientToServer::SendDuelChannelJoinRequest(BYTE channelId)
{
    dotnet_SendDuelChannelJoinRequest(this->_handle, channelId);
}

void PacketFunctions_ClientToServer::SendDuelChannelQuitRequest(BYTE channelId)
{
    dotnet_SendDuelChannelQuitRequest(this->_handle, channelId);
}
