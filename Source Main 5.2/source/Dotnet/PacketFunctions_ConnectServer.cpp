// <copyright file="PacketFunctions.cpp" company="MUnique">
// Licensed under the MIT License. See LICENSE file in the project root for full license information.
// </copyright>

//------------------------------------------------------------------------------
// <auto-generated>
//     This source code was auto-generated by an XSL transformation.
//     Do not change this file. Instead, change the XML data which contains
//     the packet definitions and re-run the transformation (publish/rebuild the
//     managed library project).
// </auto-generated>
//------------------------------------------------------------------------------

#include "stdafx.h"
#include "PacketFunctions_ConnectServer.h"
#include "PacketBindings_ConnectServer.h"


void PacketFunctions_ConnectServer::SendConnectionInfoRequest075(BYTE serverId)
{
    dotnet_SendConnectionInfoRequest075(this->_handle, serverId);
}

void PacketFunctions_ConnectServer::SendConnectionInfoRequest(uint16_t serverId)
{
    dotnet_SendConnectionInfoRequest(this->_handle, serverId);
}

void PacketFunctions_ConnectServer::SendConnectionInfo(char* ipAddress, uint32_t ipAddressByteLength, uint16_t port)
{
    dotnet_SendConnectionInfo(this->_handle, ipAddress, ipAddressByteLength, port);
}

void PacketFunctions_ConnectServer::SendServerListRequest()
{
    dotnet_SendServerListRequest(this->_handle);
}

void PacketFunctions_ConnectServer::SendServerListRequestOld()
{
    dotnet_SendServerListRequestOld(this->_handle);
}

void PacketFunctions_ConnectServer::SendHello()
{
    dotnet_SendHello(this->_handle);
}

void PacketFunctions_ConnectServer::SendPatchCheckRequest(BYTE majorVersion, BYTE minorVersion, BYTE patchVersion)
{
    dotnet_SendPatchCheckRequest(this->_handle, majorVersion, minorVersion, patchVersion);
}

void PacketFunctions_ConnectServer::SendPatchVersionOkay()
{
    dotnet_SendPatchVersionOkay(this->_handle);
}

void PacketFunctions_ConnectServer::SendClientNeedsPatch(BYTE patchVersion, char* patchAddress, uint32_t patchAddressByteLength)
{
    dotnet_SendClientNeedsPatch(this->_handle, patchVersion, patchAddress, patchAddressByteLength);
}
